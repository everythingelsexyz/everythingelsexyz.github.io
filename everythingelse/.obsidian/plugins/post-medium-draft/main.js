/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PostMediumDraftPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  userMediumToken: ""
};
var PostMediumDraftPlugin = class extends import_obsidian.Plugin {
  async publishToMedium(view) {
    if (!view || !view.file) {
      new import_obsidian.Notice("Failed to post: No file in active view!");
      return;
    }
    if (!this.settings.userMediumToken || !this.settings.userId) {
      new import_obsidian.Notice("Please check your Medium token");
      return;
    }
    const body = {
      "title": view.file.basename,
      "content": view.getViewData(),
      "contentFormat": "markdown",
      "publishStatus": "draft"
    };
    try {
      const reqBody = {
        url: `https://api.medium.com/v1/users/${this.settings.userId}/posts`,
        method: "POST",
        headers: {
          "Authorization": `Bearer ${this.settings.userMediumToken}`,
          "Content-Type": "application/json",
          "Accept": "application/json",
          "Accept-Charset": "utf-8"
        },
        body: JSON.stringify(body)
      };
      const response = await (0, import_obsidian.request)(reqBody);
      const data = JSON.parse(response);
      const message = `Posted Medium draft: ${data.data.url}`;
      new import_obsidian.Notice(message);
    } catch (error) {
      new import_obsidian.Notice(`Failed to post to Medium: ${error}`);
    }
  }
  async onload() {
    await this.loadSettings();
    const ribbonIconPost = this.addRibbonIcon("monitor-up", "Post Medium draft", (evt) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!view) {
        new import_obsidian.Notice("Failed to post: No file in active view!");
        return;
      }
      if (evt.which && evt.which === 1) {
        this.publishToMedium(view);
      }
    });
    ribbonIconPost.addClass("post-medium-ribbon-class");
    this.addCommand({
      id: "post-medium-draft",
      name: "Send Note",
      editorCallback: (_, view) => {
        this.publishToMedium(view);
      }
    });
    this.addSettingTab(new SettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.checkValidToken(this.settings.userMediumToken);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async checkValidToken(token) {
    try {
      const response = await (0, import_obsidian.request)({
        url: "https://api.medium.com/v1/me",
        method: "GET",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json",
          "Accept": "application/json"
        }
      });
      const data = JSON.parse(response);
      const username = data.data.username;
      const properName = data.data.name;
      this.settings.userName = username;
      this.settings.userProperName = properName;
      this.settings.userId = data.data.id;
      return {
        state: "success",
        data
      };
    } catch (error) {
      console.error("Error while checking Medium token:", error);
      return {
        state: "error",
        error
      };
    }
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Medium service integration token").setDesc("Create one in your Medium account settings under: Security and apps > Integration tokens").addText((text) => text.setPlaceholder("Enter your token").setValue(this.plugin.settings.userMediumToken).onChange(async (value) => {
      this.plugin.settings.userMediumToken = value;
      await this.plugin.saveSettings();
      if (value) {
        const result = await this.plugin.checkValidToken(value);
        if (result.state === "success") {
          const username = result.data.data.username;
          const message = `Token is valid! Username: ${username}`;
          new import_obsidian.Notice(message);
        } else {
          const message = `Token is invalid! Error: ${result.error}`;
          new import_obsidian.Notice(message);
        }
      }
    }));
  }
};
